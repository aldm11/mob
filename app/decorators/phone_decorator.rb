include ActionView::Helpers::TextHelper

class PhoneDecorator < Draper::Base
  decorates :phone

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
  
  def name
    [phone.brand, phone.model].join(" ")
  end
  
  def created_at
    h.content_tag(:small, phone.created_at.strftime("%m/%d/%Y %H:%M"), :class => "pull-left")
  end
  
  def image_path1
    image_url = if phone.image.path
      phone.image
    elsif phone.amazon_image_medium
      phone.amazon_image_medium
    else phone.image.path
      gravatar_id = Digest::MD5::hexdigest("amer.zildzi@gmail.com")
      "https://secure.gravatar.com/avatar/#{gravatar_id}"
    end
  end
  
  IMAGE_FORMATS = [".jpg", ".jpeg", ".png", ".gif"]
  def image_path
    image_url = if phone.amazon_image_small_full.path && IMAGE_FORMATS.any? { |format| File.extname(phone.amazon_image_small_full.url).include?(format) }
      phone.amazon_image_small_full
    elsif phone.amazon_image_medium_full.path && IMAGE_FORMATS.any? { |format| File.extname(phone.amazon_image_medium_full.url).include?(format) }
      phone.amazon_image_medium_full
    else
      "no_image.jpg"
    end
  end
  
  def render_image(size)
    h.image_tag(image_path, :class => "img-rounded")
  end
  
  def show_reviews
    h.content_tag(:span, :title => pluralize(overall_review[:count], "review")) do 
      h.content_tag(:span, phone.overall_review[:average])
      h.content_tag(:span, "", :class => "icon-star")
    end
  end
end
